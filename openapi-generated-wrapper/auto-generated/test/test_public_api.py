# coding: utf-8

"""
    DraCor API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.2
    Contact: fr.fischer@fu-berlin.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.public_api import PublicApi


class TestPublicApi(unittest.TestCase):
    """PublicApi unit test stubs"""

    def setUp(self) -> None:
        self.api = PublicApi()

    def tearDown(self) -> None:
        pass

    def test_api_info(self) -> None:
        """Test case for api_info

        API info
        """
        pass

    def test_corpus_metadata(self) -> None:
        """Test case for corpus_metadata

        List of metadata for all plays in a corpus
        """
        pass

    def test_corpus_metadata_csv_endpoint(self) -> None:
        """Test case for corpus_metadata_csv_endpoint

        List of metadata for all plays in a corpus
        """
        pass

    def test_get_characters(self) -> None:
        """Test case for get_characters

        Get a list of characters of a play
        """
        pass

    def test_get_characters_csv(self) -> None:
        """Test case for get_characters_csv

        Get a list of characters of a play (CSV)
        """
        pass

    def test_list_corpora(self) -> None:
        """Test case for list_corpora

        List available corpora
        """
        pass

    def test_list_corpus_content(self) -> None:
        """Test case for list_corpus_content

        List corpus content
        """
        pass

    def test_network_csv(self) -> None:
        """Test case for network_csv

        Get network data of a play as CSV
        """
        pass

    def test_network_gexf(self) -> None:
        """Test case for network_gexf

        Get network data of a play as GEXF
        """
        pass

    def test_network_graphml(self) -> None:
        """Test case for network_graphml

        Get network data of a play as GraphML
        """
        pass

    def test_play_info(self) -> None:
        """Test case for play_info

        Get metadata and network metrics for a single play
        """
        pass

    def test_play_metrics(self) -> None:
        """Test case for play_metrics

        Get network metrics for a single play
        """
        pass

    def test_play_spoken_text(self) -> None:
        """Test case for play_spoken_text

        Get spoken text of a play (excluding stage directions)
        """
        pass

    def test_play_spoken_text_by_character(self) -> None:
        """Test case for play_spoken_text_by_character

        Get spoken text for each character of a play
        """
        pass

    def test_play_stage_directions(self) -> None:
        """Test case for play_stage_directions

        Get all stage directions of a play
        """
        pass

    def test_play_stage_directions_with_speakers(self) -> None:
        """Test case for play_stage_directions_with_speakers

        Get all stage directions of a play including speakers
        """
        pass

    def test_play_tei(self) -> None:
        """Test case for play_tei

        Get TEI document of a single play
        """
        pass

    def test_plays_with_character(self) -> None:
        """Test case for plays_with_character

        List plays having a character identified by Wikidata ID
        """
        pass

    def test_relations_csv(self) -> None:
        """Test case for relations_csv

        Get relation data of a play as CSV
        """
        pass

    def test_relations_gexf(self) -> None:
        """Test case for relations_gexf

        Get relation data of a play as GEXF
        """
        pass

    def test_relations_graphml(self) -> None:
        """Test case for relations_graphml

        Get relation data of a play as GraphML
        """
        pass

    def test_resolve_id(self) -> None:
        """Test case for resolve_id

        Resolve DraCor play ID
        """
        pass


if __name__ == '__main__':
    unittest.main()
