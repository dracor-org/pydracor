# coding: utf-8

"""
    DraCor API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.2
    Contact: fr.fischer@fu-berlin.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.author_in_play_in_corpus import AuthorInPlayInCorpus
from openapi_client.models.source_in_play_metadata import SourceInPlayMetadata
from typing import Optional, Set
from typing_extensions import Self

class PlayInCorpus(BaseModel):
    """
    PlayInCorpus
    """ # noqa: E501
    wikidata_id: Optional[StrictStr] = Field(default=None, alias="wikidataId")
    year_written: Optional[StrictStr] = Field(default=None, alias="yearWritten")
    source: Optional[SourceInPlayMetadata] = None
    year_premiered: Optional[StrictStr] = Field(default=None, alias="yearPremiered")
    title: Optional[StrictStr] = None
    networkdata_csv_url: Optional[StrictStr] = Field(default=None, alias="networkdataCsvUrl")
    id: Optional[StrictStr] = None
    title_en: Optional[StrictStr] = Field(default=None, alias="titleEn")
    subtitle: Optional[StrictStr] = None
    date_premiered: Optional[StrictStr] = Field(default=None, alias="datePremiered")
    year_printed: Optional[StrictStr] = Field(default=None, alias="yearPrinted")
    year_normalized: Optional[StrictInt] = Field(default=None, alias="yearNormalized")
    authors: Optional[List[AuthorInPlayInCorpus]] = None
    name: Optional[StrictStr] = None
    network_size: Optional[StrictInt] = Field(default=None, alias="networkSize")
    subtitle_en: Optional[StrictStr] = Field(default=None, alias="subtitleEn")
    __properties: ClassVar[List[str]] = ["wikidataId", "yearWritten", "source", "yearPremiered", "title", "networkdataCsvUrl", "id", "titleEn", "subtitle", "datePremiered", "yearPrinted", "yearNormalized", "authors", "name", "networkSize", "subtitleEn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlayInCorpus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in authors (list)
        _items = []
        if self.authors:
            for _item in self.authors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['authors'] = _items
        # set to None if wikidata_id (nullable) is None
        # and model_fields_set contains the field
        if self.wikidata_id is None and "wikidata_id" in self.model_fields_set:
            _dict['wikidataId'] = None

        # set to None if year_written (nullable) is None
        # and model_fields_set contains the field
        if self.year_written is None and "year_written" in self.model_fields_set:
            _dict['yearWritten'] = None

        # set to None if year_premiered (nullable) is None
        # and model_fields_set contains the field
        if self.year_premiered is None and "year_premiered" in self.model_fields_set:
            _dict['yearPremiered'] = None

        # set to None if year_printed (nullable) is None
        # and model_fields_set contains the field
        if self.year_printed is None and "year_printed" in self.model_fields_set:
            _dict['yearPrinted'] = None

        # set to None if year_normalized (nullable) is None
        # and model_fields_set contains the field
        if self.year_normalized is None and "year_normalized" in self.model_fields_set:
            _dict['yearNormalized'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlayInCorpus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "wikidataId": obj.get("wikidataId"),
            "yearWritten": obj.get("yearWritten"),
            "source": SourceInPlayMetadata.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "yearPremiered": obj.get("yearPremiered"),
            "title": obj.get("title"),
            "networkdataCsvUrl": obj.get("networkdataCsvUrl"),
            "id": obj.get("id"),
            "titleEn": obj.get("titleEn"),
            "subtitle": obj.get("subtitle"),
            "datePremiered": obj.get("datePremiered"),
            "yearPrinted": obj.get("yearPrinted"),
            "yearNormalized": obj.get("yearNormalized"),
            "authors": [AuthorInPlayInCorpus.from_dict(_item) for _item in obj["authors"]] if obj.get("authors") is not None else None,
            "name": obj.get("name"),
            "networkSize": obj.get("networkSize"),
            "subtitleEn": obj.get("subtitleEn")
        })
        return _obj


