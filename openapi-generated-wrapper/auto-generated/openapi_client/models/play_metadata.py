# coding: utf-8

"""
    DraCor API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.2
    Contact: fr.fischer@fu-berlin.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PlayMetadata(BaseModel):
    """
    PlayMetadata
    """ # noqa: E501
    num_of_speakers_male: Optional[StrictInt] = Field(default=None, alias="numOfSpeakersMale")
    diameter: Optional[StrictInt] = None
    wikidata_id: Optional[StrictStr] = Field(default=None, alias="wikidataId")
    num_of_speakers_female: Optional[StrictInt] = Field(default=None, alias="numOfSpeakersFemale")
    average_clustering: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="averageClustering")
    year_premiered: Optional[StrictStr] = Field(default=None, alias="yearPremiered")
    original_source_pub_place: Optional[StrictStr] = Field(default=None, alias="originalSourcePubPlace")
    num_of_speakers: Optional[StrictInt] = Field(default=None, alias="numOfSpeakers")
    name: Optional[StrictStr] = None
    word_count_stage: Optional[StrictInt] = Field(default=None, alias="wordCountStage")
    normalized_genre: Optional[StrictStr] = Field(default=None, alias="normalizedGenre")
    num_of_l: Optional[StrictInt] = Field(default=None, alias="numOfL")
    word_count_sp: Optional[StrictInt] = Field(default=None, alias="wordCountSp")
    num_of_speakers_unknown: Optional[StrictInt] = Field(default=None, alias="numOfSpeakersUnknown")
    average_path_length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="averagePathLength")
    original_source_year: Optional[StrictInt] = Field(default=None, alias="originalSourceYear")
    max_degree: Optional[StrictInt] = Field(default=None, alias="maxDegree")
    num_edges: Optional[StrictInt] = Field(default=None, alias="numEdges")
    subtitle: Optional[StrictStr] = None
    first_author: Optional[StrictStr] = Field(default=None, alias="firstAuthor")
    original_source_publisher: Optional[StrictStr] = Field(default=None, alias="originalSourcePublisher")
    libretto: Optional[StrictBool] = None
    num_connected_components: Optional[StrictInt] = Field(default=None, alias="numConnectedComponents")
    year_written: Optional[StrictStr] = Field(default=None, alias="yearWritten")
    play_name: Optional[StrictStr] = Field(default=None, alias="playName")
    num_of_p: Optional[StrictInt] = Field(default=None, alias="numOfP")
    id: Optional[StrictStr] = None
    word_count_text: Optional[StrictInt] = Field(default=None, alias="wordCountText")
    date_premiered: Optional[StrictStr] = Field(default=None, alias="datePremiered")
    size: Optional[StrictInt] = None
    average_degree: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="averageDegree")
    year_printed: Optional[StrictStr] = Field(default=None, alias="yearPrinted")
    num_of_segments: Optional[StrictInt] = Field(default=None, alias="numOfSegments")
    num_of_acts: Optional[StrictInt] = Field(default=None, alias="numOfActs")
    title: Optional[StrictStr] = None
    wikipedia_link_count: Optional[StrictInt] = Field(default=None, alias="wikipediaLinkCount")
    digital_source: Optional[Any] = Field(default=None, alias="digitalSource")
    num_of_person_groups: Optional[StrictInt] = Field(default=None, alias="numOfPersonGroups")
    year_normalized: Optional[StrictInt] = Field(default=None, alias="yearNormalized")
    num_of_co_authors: Optional[StrictInt] = Field(default=None, alias="numOfCoAuthors")
    max_degree_ids: Optional[StrictStr] = Field(default=None, alias="maxDegreeIds")
    original_source_number_of_pages: Optional[StrictInt] = Field(default=None, alias="originalSourceNumberOfPages")
    density: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["numOfSpeakersMale", "diameter", "wikidataId", "numOfSpeakersFemale", "averageClustering", "yearPremiered", "originalSourcePubPlace", "numOfSpeakers", "name", "wordCountStage", "normalizedGenre", "numOfL", "wordCountSp", "numOfSpeakersUnknown", "averagePathLength", "originalSourceYear", "maxDegree", "numEdges", "subtitle", "firstAuthor", "originalSourcePublisher", "libretto", "numConnectedComponents", "yearWritten", "playName", "numOfP", "id", "wordCountText", "datePremiered", "size", "averageDegree", "yearPrinted", "numOfSegments", "numOfActs", "title", "wikipediaLinkCount", "digitalSource", "numOfPersonGroups", "yearNormalized", "numOfCoAuthors", "maxDegreeIds", "originalSourceNumberOfPages", "density"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlayMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if wikidata_id (nullable) is None
        # and model_fields_set contains the field
        if self.wikidata_id is None and "wikidata_id" in self.model_fields_set:
            _dict['wikidataId'] = None

        # set to None if year_premiered (nullable) is None
        # and model_fields_set contains the field
        if self.year_premiered is None and "year_premiered" in self.model_fields_set:
            _dict['yearPremiered'] = None

        # set to None if original_source_pub_place (nullable) is None
        # and model_fields_set contains the field
        if self.original_source_pub_place is None and "original_source_pub_place" in self.model_fields_set:
            _dict['originalSourcePubPlace'] = None

        # set to None if normalized_genre (nullable) is None
        # and model_fields_set contains the field
        if self.normalized_genre is None and "normalized_genre" in self.model_fields_set:
            _dict['normalizedGenre'] = None

        # set to None if original_source_year (nullable) is None
        # and model_fields_set contains the field
        if self.original_source_year is None and "original_source_year" in self.model_fields_set:
            _dict['originalSourceYear'] = None

        # set to None if subtitle (nullable) is None
        # and model_fields_set contains the field
        if self.subtitle is None and "subtitle" in self.model_fields_set:
            _dict['subtitle'] = None

        # set to None if original_source_publisher (nullable) is None
        # and model_fields_set contains the field
        if self.original_source_publisher is None and "original_source_publisher" in self.model_fields_set:
            _dict['originalSourcePublisher'] = None

        # set to None if year_written (nullable) is None
        # and model_fields_set contains the field
        if self.year_written is None and "year_written" in self.model_fields_set:
            _dict['yearWritten'] = None

        # set to None if year_printed (nullable) is None
        # and model_fields_set contains the field
        if self.year_printed is None and "year_printed" in self.model_fields_set:
            _dict['yearPrinted'] = None

        # set to None if wikipedia_link_count (nullable) is None
        # and model_fields_set contains the field
        if self.wikipedia_link_count is None and "wikipedia_link_count" in self.model_fields_set:
            _dict['wikipediaLinkCount'] = None

        # set to None if digital_source (nullable) is None
        # and model_fields_set contains the field
        if self.digital_source is None and "digital_source" in self.model_fields_set:
            _dict['digitalSource'] = None

        # set to None if year_normalized (nullable) is None
        # and model_fields_set contains the field
        if self.year_normalized is None and "year_normalized" in self.model_fields_set:
            _dict['yearNormalized'] = None

        # set to None if original_source_number_of_pages (nullable) is None
        # and model_fields_set contains the field
        if self.original_source_number_of_pages is None and "original_source_number_of_pages" in self.model_fields_set:
            _dict['originalSourceNumberOfPages'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlayMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "numOfSpeakersMale": obj.get("numOfSpeakersMale"),
            "diameter": obj.get("diameter"),
            "wikidataId": obj.get("wikidataId"),
            "numOfSpeakersFemale": obj.get("numOfSpeakersFemale"),
            "averageClustering": obj.get("averageClustering"),
            "yearPremiered": obj.get("yearPremiered"),
            "originalSourcePubPlace": obj.get("originalSourcePubPlace"),
            "numOfSpeakers": obj.get("numOfSpeakers"),
            "name": obj.get("name"),
            "wordCountStage": obj.get("wordCountStage"),
            "normalizedGenre": obj.get("normalizedGenre"),
            "numOfL": obj.get("numOfL"),
            "wordCountSp": obj.get("wordCountSp"),
            "numOfSpeakersUnknown": obj.get("numOfSpeakersUnknown"),
            "averagePathLength": obj.get("averagePathLength"),
            "originalSourceYear": obj.get("originalSourceYear"),
            "maxDegree": obj.get("maxDegree"),
            "numEdges": obj.get("numEdges"),
            "subtitle": obj.get("subtitle"),
            "firstAuthor": obj.get("firstAuthor"),
            "originalSourcePublisher": obj.get("originalSourcePublisher"),
            "libretto": obj.get("libretto"),
            "numConnectedComponents": obj.get("numConnectedComponents"),
            "yearWritten": obj.get("yearWritten"),
            "playName": obj.get("playName"),
            "numOfP": obj.get("numOfP"),
            "id": obj.get("id"),
            "wordCountText": obj.get("wordCountText"),
            "datePremiered": obj.get("datePremiered"),
            "size": obj.get("size"),
            "averageDegree": obj.get("averageDegree"),
            "yearPrinted": obj.get("yearPrinted"),
            "numOfSegments": obj.get("numOfSegments"),
            "numOfActs": obj.get("numOfActs"),
            "title": obj.get("title"),
            "wikipediaLinkCount": obj.get("wikipediaLinkCount"),
            "digitalSource": obj.get("digitalSource"),
            "numOfPersonGroups": obj.get("numOfPersonGroups"),
            "yearNormalized": obj.get("yearNormalized"),
            "numOfCoAuthors": obj.get("numOfCoAuthors"),
            "maxDegreeIds": obj.get("maxDegreeIds"),
            "originalSourceNumberOfPages": obj.get("originalSourceNumberOfPages"),
            "density": obj.get("density")
        })
        return _obj


